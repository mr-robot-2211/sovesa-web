import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { auth } from "@/auth.js";

// Initialize Supabase client with service role key for admin operations
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

/**
 * GET /api/participants - Retrieve all participants
 * Returns a list of all participants ordered by creation date (newest first)
 */
export async function GET() {
  try {
    const { data, error } = await supabase
      .from('participants')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error:', error);
      return NextResponse.json(
        { success: false, error: 'Failed to fetch participants' },
        { status: 500 }
      );
    }

    // Transform database records to match frontend Participant interface
    const transformedData = (data || []).map(participant => ({
      id: participant.id,
      name: participant.name,
      email: participant.email,
      phone: participant.phone,
      registrationTime: participant.created_at || new Date().toISOString(),
      status: 'registered' as const, // Default status for existing participants
      qrCode: participant.id, // Use participant ID as QR code identifier
    }));

    return NextResponse.json({ success: true, data: transformedData });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch participants' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/participants - Create a new participant
 * Requires authentication and phone number in request body
 * Validates input and prevents duplicate registrations
 */
export async function POST(req: Request) {
  const session = await auth();
  const user = session?.user;

  if (!user) {
    return new Response("Unauthorized", { status: 401 });
  }

  try {
    const { phone } = await req.json();
    const { name, email } = user;

    // Validate required fields from user session and request
    if (!name || !email) {
      return new Response("Missing required fields: name or email", { status: 400 });
    }

    if (!phone) {
      return new Response("Missing required field: phone", { status: 400 });
    }

    // Validate phone number format (10 digits)
    if (!/^\d{10}$/.test(phone)) {
      return new Response("Phone number must be 10 digits", { status: 400 });
    }

    // Check for existing participant to prevent duplicates
    const { data: existingParticipant } = await supabase
      .from('participants')
      .select('id')
      .eq('email', email)
      .single();

    if (existingParticipant) {
      return new Response("Participant with this email already exists", { status: 409 });
    }

    // Generate unique UUID for participant ID
    const participantId = crypto.randomUUID();

    // Insert new participant record
    const { data, error } = await supabase
      .from('participants')
      .insert([
        {
          id: participantId,
          name,
          email,
          phone,
          // Optional fields: age, address, emergency_contact, dietary_restrictions, special_needs
          // created_at will be auto-generated by Supabase
        },
      ])
      .select();

    if (error) {
      console.error('Supabase insert error:', error);
      return new Response(`Database error: ${error.message}`, { status: 500 });
    }

    // Transform created participant to match frontend interface
    const transformedParticipant = {
      id: data[0].id,
      name: data[0].name,
      email: data[0].email,
      phone: data[0].phone,
      registrationTime: data[0].created_at || new Date().toISOString(),
      status: 'registered' as const,
      qrCode: data[0].id,
    };

    return new Response(JSON.stringify({ success: true, data: transformedParticipant }), { status: 201 });
  } catch (error) {
    console.error('API error:', error);
    return new Response("Internal server error", { status: 500 });
  }
}